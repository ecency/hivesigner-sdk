(()=>{var t={98:function(t,e){var r=function(t){function e(){this.fetch=!1,this.DOMException=t.DOMException}return e.prototype=t,new e}("undefined"!=typeof self?self:this);!function(t){!function(e){var r="URLSearchParams"in t,o="Symbol"in t&&"iterator"in Symbol,n="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),i="FormData"in t,s="ArrayBuffer"in t;if(s)var a=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],u=ArrayBuffer.isView||function(t){return t&&a.indexOf(Object.prototype.toString.call(t))>-1};function c(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function h(t){return"string"!=typeof t&&(t=String(t)),t}function p(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return o&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach((function(t,e){this.append(e,t)}),this):Array.isArray(t)?t.forEach((function(t){this.append(t[0],t[1])}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function l(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function d(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function y(t){var e=new FileReader,r=d(e);return e.readAsArrayBuffer(t),r}function b(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function w(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:i&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():s&&n&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=b(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):s&&(ArrayBuffer.prototype.isPrototypeOf(t)||u(t))?this._bodyArrayBuffer=b(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var t=l(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?l(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(y)}),this.text=function(){var t,e,r,o=l(this);if(o)return o;if(this._bodyBlob)return t=this._bodyBlob,r=d(e=new FileReader),e.readAsText(t),r;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),o=0;o<e.length;o++)r[o]=String.fromCharCode(e[o]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},i&&(this.formData=function(){return this.text().then(g)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=c(t),e=h(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},f.prototype.delete=function(t){delete this.map[c(t)]},f.prototype.get=function(t){return t=c(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(c(t))},f.prototype.set=function(t,e){this.map[c(t)]=h(e)},f.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},f.prototype.keys=function(){var t=[];return this.forEach((function(e,r){t.push(r)})),p(t)},f.prototype.values=function(){var t=[];return this.forEach((function(e){t.push(e)})),p(t)},f.prototype.entries=function(){var t=[];return this.forEach((function(e,r){t.push([r,e])})),p(t)},o&&(f.prototype[Symbol.iterator]=f.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(t,e){var r,o,n=(e=e||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,n||null==t._bodyInit||(n=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(o=(r=e.method||this.method||"GET").toUpperCase(),m.indexOf(o)>-1?o:r),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function g(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),o=r.shift().replace(/\+/g," "),n=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(o),decodeURIComponent(n))}})),e}function _(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},w.call(v.prototype),w.call(_.prototype),_.prototype.clone=function(){return new _(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},_.error=function(){var t=new _(null,{status:0,statusText:""});return t.type="error",t};var T=[301,302,303,307,308];_.redirect=function(t,e){if(-1===T.indexOf(e))throw new RangeError("Invalid status code");return new _(null,{status:e,headers:{location:t}})},e.DOMException=t.DOMException;try{new e.DOMException}catch(t){e.DOMException=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack},e.DOMException.prototype=Object.create(Error.prototype),e.DOMException.prototype.constructor=e.DOMException}function U(t,r){return new Promise((function(o,i){var s=new v(t,r);if(s.signal&&s.signal.aborted)return i(new e.DOMException("Aborted","AbortError"));var a=new XMLHttpRequest;function u(){a.abort()}a.onload=function(){var t,e,r={status:a.status,statusText:a.statusText,headers:(t=a.getAllResponseHeaders()||"",e=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(t){var r=t.split(":"),o=r.shift().trim();if(o){var n=r.join(":").trim();e.append(o,n)}})),e)};r.url="responseURL"in a?a.responseURL:r.headers.get("X-Request-URL");var n="response"in a?a.response:a.responseText;o(new _(n,r))},a.onerror=function(){i(new TypeError("Network request failed"))},a.ontimeout=function(){i(new TypeError("Network request failed"))},a.onabort=function(){i(new e.DOMException("Aborted","AbortError"))},a.open(s.method,s.url,!0),"include"===s.credentials?a.withCredentials=!0:"omit"===s.credentials&&(a.withCredentials=!1),"responseType"in a&&n&&(a.responseType="blob"),s.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),s.signal&&(s.signal.addEventListener("abort",u),a.onreadystatechange=function(){4===a.readyState&&s.signal.removeEventListener("abort",u)}),a.send(void 0===s._bodyInit?null:s._bodyInit)}))}U.polyfill=!0,t.fetch||(t.fetch=U,t.Headers=f,t.Request=v,t.Response=_),e.Headers=f,e.Request=v,e.Response=_,e.fetch=U}({})}(r),delete r.fetch.polyfill,(e=r.fetch).default=r.fetch,e.fetch=r.fetch,e.Headers=r.Headers,e.Request=r.Request,e.Response=r.Response,t.exports=e},117:(t,e,r)=>{"use strict";"undefined"==typeof URL&&(r.g.URL=r(355).URL),"undefined"==typeof URLSearchParams&&(r.g.URLSearchParams=r(355).URLSearchParams),"undefined"==typeof btoa&&(r.g.btoa=function(t){return new Buffer(t,"binary").toString("base64")}),"undefined"==typeof atob&&(r.g.atob=function(t){return new Buffer(t,"base64").toString("binary")});var o={"/":"_",_:"/","+":"-","-":"+","=":".",".":"="},n=function(t){return btoa(t).replace(/(\+|\/|=)/g,(function(t){return o[t]}))};function i(t){var e=new URLSearchParams;!0===t.no_broadcast&&e.set("nb",""),t.signer&&e.set("s",t.signer),t.callback&&e.set("cb",n(t.callback));var r=e.toString();return r.length>0&&(r="?"+r),r}function s(t){return n(JSON.stringify(t,null,0))}e.yW=function(t,e){return void 0===e&&(e={}),"hive://sign/tx/"+s(t)+i(e)},e.i3=function(t,e){return void 0===e&&(e={}),"hive://sign/op/"+s(t)+i(e)},e.u_=function(t,e){return void 0===e&&(e={}),"hive://sign/ops/"+s(t)+i(e)}},355:()=>{}},e={};function r(o){if(e[o])return e[o].exports;var n=e[o]={exports:{}};return t[o].call(n.exports,n,n.exports,r),n.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(98),e=r.n(t);var o=function(t,e,r,o){return new(r||(r=Promise))((function(n,i){function s(t){try{u(o.next(t))}catch(t){i(t)}}function a(t){try{u(o.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((o=o.apply(t,e||[])).next())}))},n=function(t,e){var r,o,n,i,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,o&&(n=2&i[0]?o.return:i[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,i[1])).done)return n;switch(o=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){s.label=i[1];break}if(6===i[0]&&s.label<n[1]){s.label=n[1],n=i;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(i);break}n[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{r=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};!function(){function t(t){this.apiURL=t.apiURL,this.app=t.app,this.callbackURL=t.callbackURL,this.accessToken=t.accessToken,this.scope=t.scope,this.responseType=t.responseType}t.prototype.setBaseURL=function(){return console.warn('The function "setBaseUrl" is deprecated, the base URL is always "https://hivesigner.com", you can only change the API URL with "setApiURL"'),this},t.prototype.setApiURL=function(t){return this.apiURL=t,this},t.prototype.setApp=function(t){return this.app=t,this},t.prototype.setCallbackURL=function(t){return this.callbackURL=t,this},t.prototype.setAccessToken=function(t){return this.accessToken=t,this},t.prototype.removeAccessToken=function(){return delete this.accessToken,this},t.prototype.setScope=function(t){return this.scope=t,this},t.prototype.getLoginURL=function(t){var e=encodeURIComponent(this.callbackURL),r="https://hivesigner.com/oauth2/authorize?client_id="+this.app+"&redirect_uri="+e;return"code"===this.responseType&&(r+="&response_type="+this.responseType),this.scope&&(r+="&scope="+this.scope.join(",")),t&&(r+="&state="+encodeURIComponent(t)),r},t.prototype.login=function(t){"undefined"!=typeof window&&window&&(window.location=this.getLoginURL(t.state))},t.prototype.me=function(t){return this.send("me","POST",{},t)},t.prototype.vote=function(t,e,r,o,n){var i={voter:t,author:e,permlink:r,weight:o};return this.broadcast([["vote",i]],n)},t.prototype.broadcast=function(t,e){return this.send("broadcast","POST",{operations:t},e)},t.prototype.comment=function(t,e,r,o,n,i,s,a){var u=s;"string"!=typeof s&&(u=JSON.stringify(s));var c={parent_author:t,parent_permlink:e,author:r,permlink:o,title:n,body:i,json_metadata:u};return this.broadcast([["comment",c]],a)},t.prototype.deleteComment=function(t,e,r){var o={author:t,permlink:e};return this.broadcast([["delete_comment",o]],r)},t.prototype.customJson=function(t,e,r,o,n){var i={required_auths:t,required_posting_auths:e,id:r,json:o};return this.broadcast([["custom_json",i]],n)},t.prototype.reblog=function(t,e,r,o){var n=["reblog",{account:t,author:e,permlink:r}];return this.customJson([],[t],"follow",JSON.stringify(n),o)},t.prototype.follow=function(t,e,r){var o=["follow",{follower:t,following:e,what:["blog"]}];return this.customJson([],[t],"follow",JSON.stringify(o),r)},t.prototype.unfollow=function(t,e,r){var o=["follow",{follower:t,following:e,what:[]}];return this.customJson([],[t],"follow",JSON.stringify(o),r)},t.prototype.ignore=function(t,e,r){var o=["follow",{follower:t,following:e,what:["ignore"]}];return this.customJson([],[t],"follow",JSON.stringify(o),r)},t.prototype.claimRewardBalance=function(t,e,r,o,n){var i={account:t,reward_hive:e,reward_hbd:r,reward_vests:o};return this.broadcast([["claim_reward_balance",i]],n)},t.prototype.revokeToken=function(t){return o(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return[4,this.send("oauth2/token/revoke","POST",{token:this.accessToken},t)];case 1:return e.sent(),[2,this.removeAccessToken()]}}))}))},t.prototype.updateUserMetadata=function(t,e){return void 0===t&&(t={}),console.warn('The function "updateUserMetadata" is deprecated.'),this.send("me","PUT",{user_metadata:t},e)},t.prototype.send=function(t,r,i,s){return o(this,void 0,void 0,(function(){var o,a;return n(this,(function(n){switch(n.label){case 0:return o=this.apiURL+"/api/"+t,[4,e()(o,{method:r,headers:{Accept:"application/json, text/plain, */*","Content-Type":"application/json",Authorization:this.accessToken},body:JSON.stringify(i)})];case 1:return[4,(a=n.sent()).json()];case 2:return(n.sent().error||200!==a.status)&&s(a,null),s?[2,s(null,a)]:[2,a]}}))}))}}(),r(117)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,