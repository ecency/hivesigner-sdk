(() => {
    var e = {
        98: function (e, t) {
            var r = function (e) {
                function t() {
                    this.fetch = !1, this.DOMException = e.DOMException
                }

                return t.prototype = e, new t
            }("undefined" != typeof self ? self : this);
            !function (e) {
                !function (t) {
                    var r = "URLSearchParams" in e, n = "Symbol" in e && "iterator" in Symbol,
                        o = "FileReader" in e && "Blob" in e && function () {
                            try {
                                return new Blob, !0
                            } catch (e) {
                                return !1
                            }
                        }(), i = "FormData" in e, s = "ArrayBuffer" in e;
                    if (s) var a = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
                        c = ArrayBuffer.isView || function (e) {
                            return e && a.indexOf(Object.prototype.toString.call(e)) > -1
                        };

                    function u(e) {
                        if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
                        return e.toLowerCase()
                    }

                    function p(e) {
                        return "string" != typeof e && (e = String(e)), e
                    }

                    function f(e) {
                        var t = {
                            next: function () {
                                var t = e.shift();
                                return {done: void 0 === t, value: t}
                            }
                        };
                        return n && (t[Symbol.iterator] = function () {
                            return t
                        }), t
                    }

                    function l(e) {
                        this.map = {}, e instanceof l ? e.forEach((function (e, t) {
                            this.append(t, e)
                        }), this) : Array.isArray(e) ? e.forEach((function (e) {
                            this.append(e[0], e[1])
                        }), this) : e && Object.getOwnPropertyNames(e).forEach((function (t) {
                            this.append(t, e[t])
                        }), this)
                    }

                    function h(e) {
                        if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
                        e.bodyUsed = !0
                    }

                    function d(e) {
                        return new Promise((function (t, r) {
                            e.onload = function () {
                                t(e.result)
                            }, e.onerror = function () {
                                r(e.error)
                            }
                        }))
                    }

                    function y(e) {
                        var t = new FileReader, r = d(t);
                        return t.readAsArrayBuffer(e), r
                    }

                    function b(e) {
                        if (e.slice) return e.slice(0);
                        var t = new Uint8Array(e.byteLength);
                        return t.set(new Uint8Array(e)), t.buffer
                    }

                    function v() {
                        return this.bodyUsed = !1, this._initBody = function (e) {
                            var t;
                            this._bodyInit = e, e ? "string" == typeof e ? this._bodyText = e : o && Blob.prototype.isPrototypeOf(e) ? this._bodyBlob = e : i && FormData.prototype.isPrototypeOf(e) ? this._bodyFormData = e : r && URLSearchParams.prototype.isPrototypeOf(e) ? this._bodyText = e.toString() : s && o && (t = e) && DataView.prototype.isPrototypeOf(t) ? (this._bodyArrayBuffer = b(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : s && (ArrayBuffer.prototype.isPrototypeOf(e) || c(e)) ? this._bodyArrayBuffer = b(e) : this._bodyText = e = Object.prototype.toString.call(e) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : r && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"))
                        }, o && (this.blob = function () {
                            var e = h(this);
                            if (e) return e;
                            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                            if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                            if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                            return Promise.resolve(new Blob([this._bodyText]))
                        }, this.arrayBuffer = function () {
                            return this._bodyArrayBuffer ? h(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(y)
                        }), this.text = function () {
                            var e, t, r, n = h(this);
                            if (n) return n;
                            if (this._bodyBlob) return e = this._bodyBlob, r = d(t = new FileReader), t.readAsText(e), r;
                            if (this._bodyArrayBuffer) return Promise.resolve(function (e) {
                                for (var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++) r[n] = String.fromCharCode(t[n]);
                                return r.join("")
                            }(this._bodyArrayBuffer));
                            if (this._bodyFormData) throw new Error("could not read FormData body as text");
                            return Promise.resolve(this._bodyText)
                        }, i && (this.formData = function () {
                            return this.text().then(m)
                        }), this.json = function () {
                            return this.text().then(JSON.parse)
                        }, this
                    }

                    l.prototype.append = function (e, t) {
                        e = u(e), t = p(t);
                        var r = this.map[e];
                        this.map[e] = r ? r + ", " + t : t
                    }, l.prototype.delete = function (e) {
                        delete this.map[u(e)]
                    }, l.prototype.get = function (e) {
                        return e = u(e), this.has(e) ? this.map[e] : null
                    }, l.prototype.has = function (e) {
                        return this.map.hasOwnProperty(u(e))
                    }, l.prototype.set = function (e, t) {
                        this.map[u(e)] = p(t)
                    }, l.prototype.forEach = function (e, t) {
                        for (var r in this.map) this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this)
                    }, l.prototype.keys = function () {
                        var e = [];
                        return this.forEach((function (t, r) {
                            e.push(r)
                        })), f(e)
                    }, l.prototype.values = function () {
                        var e = [];
                        return this.forEach((function (t) {
                            e.push(t)
                        })), f(e)
                    }, l.prototype.entries = function () {
                        var e = [];
                        return this.forEach((function (t, r) {
                            e.push([r, t])
                        })), f(e)
                    }, n && (l.prototype[Symbol.iterator] = l.prototype.entries);
                    var _ = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

                    function w(e, t) {
                        var r, n, o = (t = t || {}).body;
                        if (e instanceof w) {
                            if (e.bodyUsed) throw new TypeError("Already read");
                            this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new l(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, o || null == e._bodyInit || (o = e._bodyInit, e.bodyUsed = !0)
                        } else this.url = String(e);
                        if (this.credentials = t.credentials || this.credentials || "same-origin", !t.headers && this.headers || (this.headers = new l(t.headers)), this.method = (n = (r = t.method || this.method || "GET").toUpperCase(), _.indexOf(n) > -1 ? n : r), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && o) throw new TypeError("Body not allowed for GET or HEAD requests");
                        this._initBody(o)
                    }

                    function m(e) {
                        var t = new FormData;
                        return e.trim().split("&").forEach((function (e) {
                            if (e) {
                                var r = e.split("="), n = r.shift().replace(/\+/g, " "),
                                    o = r.join("=").replace(/\+/g, " ");
                                t.append(decodeURIComponent(n), decodeURIComponent(o))
                            }
                        })), t
                    }

                    function g(e, t) {
                        t || (t = {}), this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new l(t.headers), this.url = t.url || "", this._initBody(e)
                    }

                    w.prototype.clone = function () {
                        return new w(this, {body: this._bodyInit})
                    }, v.call(w.prototype), v.call(g.prototype), g.prototype.clone = function () {
                        return new g(this._bodyInit, {
                            status: this.status,
                            statusText: this.statusText,
                            headers: new l(this.headers),
                            url: this.url
                        })
                    }, g.error = function () {
                        var e = new g(null, {status: 0, statusText: ""});
                        return e.type = "error", e
                    };
                    var O = [301, 302, 303, 307, 308];
                    g.redirect = function (e, t) {
                        if (-1 === O.indexOf(t)) throw new RangeError("Invalid status code");
                        return new g(null, {status: t, headers: {location: e}})
                    }, t.DOMException = e.DOMException;
                    try {
                        new t.DOMException
                    } catch (e) {
                        t.DOMException = function (e, t) {
                            this.message = e, this.name = t;
                            var r = Error(e);
                            this.stack = r.stack
                        }, t.DOMException.prototype = Object.create(Error.prototype), t.DOMException.prototype.constructor = t.DOMException
                    }

                    function x(e, r) {
                        return new Promise((function (n, i) {
                            var s = new w(e, r);
                            if (s.signal && s.signal.aborted) return i(new t.DOMException("Aborted", "AbortError"));
                            var a = new XMLHttpRequest;

                            function c() {
                                a.abort()
                            }

                            a.onload = function () {
                                var e, t, r = {
                                    status: a.status,
                                    statusText: a.statusText,
                                    headers: (e = a.getAllResponseHeaders() || "", t = new l, e.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach((function (e) {
                                        var r = e.split(":"), n = r.shift().trim();
                                        if (n) {
                                            var o = r.join(":").trim();
                                            t.append(n, o)
                                        }
                                    })), t)
                                };
                                r.url = "responseURL" in a ? a.responseURL : r.headers.get("X-Request-URL");
                                var o = "response" in a ? a.response : a.responseText;
                                n(new g(o, r))
                            }, a.onerror = function () {
                                i(new TypeError("Network request failed"))
                            }, a.ontimeout = function () {
                                i(new TypeError("Network request failed"))
                            }, a.onabort = function () {
                                i(new t.DOMException("Aborted", "AbortError"))
                            }, a.open(s.method, s.url, !0), "include" === s.credentials ? a.withCredentials = !0 : "omit" === s.credentials && (a.withCredentials = !1), "responseType" in a && o && (a.responseType = "blob"), s.headers.forEach((function (e, t) {
                                a.setRequestHeader(t, e)
                            })), s.signal && (s.signal.addEventListener("abort", c), a.onreadystatechange = function () {
                                4 === a.readyState && s.signal.removeEventListener("abort", c)
                            }), a.send(void 0 === s._bodyInit ? null : s._bodyInit)
                        }))
                    }

                    x.polyfill = !0, e.fetch || (e.fetch = x, e.Headers = l, e.Request = w, e.Response = g), t.Headers = l, t.Request = w, t.Response = g, t.fetch = x
                }({})
            }(r), delete r.fetch.polyfill, (t = r.fetch).default = r.fetch, t.fetch = r.fetch, t.Headers = r.Headers, t.Request = r.Request, t.Response = r.Response, e.exports = t
        }, 117: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), "undefined" == typeof URL && (r.g.URL = r(355).URL), "undefined" == typeof URLSearchParams && (r.g.URLSearchParams = r(355).URLSearchParams), "undefined" == typeof btoa && (r.g.btoa = function (e) {
                return new Buffer(e, "binary").toString("base64")
            }), "undefined" == typeof atob && (r.g.atob = function (e) {
                return new Buffer(e, "base64").toString("binary")
            });
            var n = {"/": "_", _: "/", "+": "-", "-": "+", "=": ".", ".": "="}, o = function (e) {
                return btoa(e).replace(/(\+|\/|=)/g, (function (e) {
                    return n[e]
                }))
            }, i = function (e) {
                return atob(e.replace(/(-|_|\.)/g, (function (e) {
                    return n[e]
                })))
            };
            t.decode = function (e) {
                var t = e.slice(0, 5), r = new URL(e.replace(/^hive:/, "http:"));
                if ("hive:" !== t) throw new Error("Invalid protocol, expected 'hive:' got '" + t + "'");
                if ("sign" !== r.host) throw new Error("Invalid action, expected 'sign' got '" + r.host + "'");
                var n, o, s = r.pathname.split("/").slice(1), a = s[0], c = s[1];
                try {
                    n = JSON.parse(i(c))
                } catch (e) {
                    throw e.message = "Invalid payload: " + e.message, e
                }
                switch (a) {
                    case"tx":
                        o = n;
                        break;
                    case"op":
                    case"ops":
                        o = {
                            ref_block_num: "__ref_block_num",
                            ref_block_prefix: "__ref_block_prefix",
                            expiration: "__expiration",
                            extensions: [],
                            operations: "ops" === a ? n : [n]
                        };
                        break;
                    default:
                        throw new Error("Invalid signing action '" + a + "'")
                }
                var u = {};
                return r.searchParams.has("cb") && (u.callback = i(r.searchParams.get("cb"))), r.searchParams.has("nb") && (u.no_broadcast = !0), r.searchParams.has("s") && (u.signer = r.searchParams.get("s")), {
                    tx: o,
                    params: u
                }
            };
            var s = /(__(ref_block_(num|prefix)|expiration|signer))/g;
            t.resolveTransaction = function (e, t, r) {
                var n = t.signer || r.preferred_signer;
                if (!r.signers.includes(n)) throw new Error("Signer '" + n + "' not available");
                var o = {
                    __ref_block_num: r.ref_block_num,
                    __ref_block_prefix: r.ref_block_prefix,
                    __expiration: r.expiration,
                    __signer: n
                }, i = function (e) {
                    var t = typeof e;
                    switch ("object" === t && Array.isArray(e) ? t = "array" : null === e && (t = "null"), t) {
                        case"string":
                            return e.replace(s, (function (e) {
                                return o[e]
                            }));
                        case"array":
                            return e.map(i);
                        case"object":
                            for (var r = {}, n = 0, a = Object.entries(e); n < a.length; n++) {
                                var c = a[n], u = c[0], p = c[1];
                                r[u] = i(p)
                            }
                            return r;
                        default:
                            return e
                    }
                };
                return {signer: n, tx: i(e)}
            };
            var a = /({{(sig|id|block|txn)}})/g;

            function c(e) {
                var t = new URLSearchParams;
                !0 === e.no_broadcast && t.set("nb", ""), e.signer && t.set("s", e.signer), e.callback && t.set("cb", o(e.callback));
                var r = t.toString();
                return r.length > 0 && (r = "?" + r), r
            }

            function u(e) {
                return o(JSON.stringify(e, null, 0))
            }

            t.resolveCallback = function (e, t) {
                return e.replace(a, (function (e, r, n) {
                    return t[n] || ""
                }))
            }, t.encodeTx = function (e, t) {
                return void 0 === t && (t = {}), "hive://sign/tx/" + u(e) + c(t)
            }, t.encodeOp = function (e, t) {
                return void 0 === t && (t = {}), "hive://sign/op/" + u(e) + c(t)
            }, t.encodeOps = function (e, t) {
                return void 0 === t && (t = {}), "hive://sign/ops/" + u(e) + c(t)
            }
        }, 934: function (e, t, r) {
            "use strict";
            var n = this && this.__awaiter || function (e, t, r, n) {
                return new (r || (r = Promise))((function (o, i) {
                    function s(e) {
                        try {
                            c(n.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function a(e) {
                        try {
                            c(n.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }

                    function c(e) {
                        var t;
                        e.done ? o(e.value) : (t = e.value, t instanceof r ? t : new r((function (e) {
                            e(t)
                        }))).then(s, a)
                    }

                    c((n = n.apply(e, t || [])).next())
                }))
            }, o = this && this.__generator || function (e, t) {
                var r, n, o, i, s = {
                    label: 0, sent: function () {
                        if (1 & o[0]) throw o[1];
                        return o[1]
                    }, trys: [], ops: []
                };
                return i = {
                    next: a(0),
                    throw: a(1),
                    return: a(2)
                }, "function" == typeof Symbol && (i[Symbol.iterator] = function () {
                    return this
                }), i;

                function a(i) {
                    return function (a) {
                        return function (i) {
                            if (r) throw new TypeError("Generator is already executing.");
                            for (; s;) try {
                                if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
                                switch (n = 0, o && (i = [2 & i[0], o.value]), i[0]) {
                                    case 0:
                                    case 1:
                                        o = i;
                                        break;
                                    case 4:
                                        return s.label++, {value: i[1], done: !1};
                                    case 5:
                                        s.label++, n = i[1], i = [0];
                                        continue;
                                    case 7:
                                        i = s.ops.pop(), s.trys.pop();
                                        continue;
                                    default:
                                        if (!((o = (o = s.trys).length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {
                                            s = 0;
                                            continue
                                        }
                                        if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                                            s.label = i[1];
                                            break
                                        }
                                        if (6 === i[0] && s.label < o[1]) {
                                            s.label = o[1], o = i;
                                            break
                                        }
                                        if (o && s.label < o[2]) {
                                            s.label = o[2], s.ops.push(i);
                                            break
                                        }
                                        o[2] && s.ops.pop(), s.trys.pop();
                                        continue
                                }
                                i = t.call(e, s)
                            } catch (e) {
                                i = [6, e], n = 0
                            } finally {
                                r = o = 0
                            }
                            if (5 & i[0]) throw i[1];
                            return {value: i[0] ? i[1] : void 0, done: !0}
                        }([i, a])
                    }
                }
            };
            Object.defineProperty(t, "__esModule", {value: !0}), t.Client = void 0;
            var i = r(98), s = r(366), a = r(955), c = function () {
                function e(e) {
                    this.apiURL = e.apiURL, this.app = e.app, this.callbackURL = e.callbackURL, this.accessToken = e.accessToken, this.scope = e.scope, this.responseType = e.responseType
                }

                return e.prototype.setBaseURL = function () {
                    return console.warn('The function "setBaseUrl" is deprecated, the base URL is always "https://hivesigner.com", you can only change the API URL with "setApiURL"'), this
                }, e.prototype.setApiURL = function (e) {
                    return this.apiURL = e, this
                }, e.prototype.setApp = function (e) {
                    return this.app = e, this
                }, e.prototype.setCallbackURL = function (e) {
                    return this.callbackURL = e, this
                }, e.prototype.setAccessToken = function (e) {
                    return this.accessToken = e, this
                }, e.prototype.removeAccessToken = function () {
                    return delete this.accessToken, this
                }, e.prototype.setScope = function (e) {
                    return this.scope = e, this
                }, e.prototype.getLoginURL = function (e) {
                    var t = encodeURIComponent(this.callbackURL),
                        r = s.BASE_URL + "/oauth2/authorize?client_id=" + this.app + "&redirect_uri=" + t;
                    return "code" === this.responseType && (r += "&response_type=" + this.responseType), this.scope && (r += "&scope=" + this.scope.join(",")), e && (r += "&state=" + encodeURIComponent(e)), r
                }, e.prototype.login = function (e) {
                    a.isBrowser() && (window.location = this.getLoginURL(e.state))
                }, e.prototype.me = function (e) {
                    return this.send("me", "POST", {}, e)
                }, e.prototype.vote = function (e, t, r, n, o) {
                    var i = {voter: e, author: t, permlink: r, weight: n};
                    return this.broadcast([["vote", i]], o)
                }, e.prototype.comment = function (e, t, r, n, o, i, s, a) {
                    var c = s;
                    "string" != typeof s && (c = JSON.stringify(s));
                    var u = {
                        parent_author: e,
                        parent_permlink: t,
                        author: r,
                        permlink: n,
                        title: o,
                        body: i,
                        json_metadata: c
                    };
                    return this.broadcast([["comment", u]], a)
                }, e.prototype.deleteComment = function (e, t, r) {
                    var n = {author: e, permlink: t};
                    return this.broadcast([["delete_comment", n]], r)
                }, e.prototype.customJson = function (e, t, r, n, o) {
                    var i = {required_auths: e, required_posting_auths: t, id: r, json: n};
                    return this.broadcast([["custom_json", i]], o)
                }, e.prototype.reblog = function (e, t, r, n) {
                    var o = ["reblog", {account: e, author: t, permlink: r}];
                    return this.customJson([], [e], "follow", JSON.stringify(o), n)
                }, e.prototype.follow = function (e, t, r) {
                    var n = ["follow", {follower: e, following: t, what: ["blog"]}];
                    return this.customJson([], [e], "follow", JSON.stringify(n), r)
                }, e.prototype.unfollow = function (e, t, r) {
                    var n = ["follow", {follower: e, following: t, what: []}];
                    return this.customJson([], [e], "follow", JSON.stringify(n), r)
                }, e.prototype.ignore = function (e, t, r) {
                    var n = ["follow", {follower: e, following: t, what: ["ignore"]}];
                    return this.customJson([], [e], "follow", JSON.stringify(n), r)
                }, e.prototype.claimRewardBalance = function (e, t, r, n, o) {
                    var i = {account: e, reward_hive: t, reward_hbd: r, reward_vests: n};
                    return this.broadcast([["claim_reward_balance", i]], o)
                }, e.prototype.revokeToken = function (e) {
                    return n(this, void 0, void 0, (function () {
                        return o(this, (function (t) {
                            switch (t.label) {
                                case 0:
                                    return [4, this.send("oauth2/token/revoke", "POST", {token: this.accessToken}, e)];
                                case 1:
                                    return t.sent(), [2, this.removeAccessToken()]
                            }
                        }))
                    }))
                }, e.prototype.updateUserMetadata = function (e, t) {
                    return void 0 === e && (e = {}), console.warn('The function "updateUserMetadata" is deprecated.'), this.send("me", "PUT", {user_metadata: e}, t)
                }, e.prototype.send = function (e, t, r, s) {
                    return n(this, void 0, void 0, (function () {
                        var n, a;
                        return o(this, (function (o) {
                            switch (o.label) {
                                case 0:
                                    return n = this.apiURL + "/api/" + e, [4, i.default(n, {
                                        method: t,
                                        headers: {
                                            Accept: "application/json, text/plain, */*",
                                            "Content-Type": "application/json",
                                            Authorization: this.accessToken
                                        },
                                        body: JSON.stringify(r)
                                    })];
                                case 1:
                                    return [4, (a = o.sent()).json()];
                                case 2:
                                    if (o.sent().error || 200 !== a.status) {
                                        if (!s) throw a;
                                        s(a, null)
                                    }
                                    return s ? [2, s(null, a)] : [2, a]
                            }
                        }))
                    }))
                }, e.prototype.broadcast = function (e, t) {
                    return this.send("broadcast", "POST", {operations: e}, t)
                }, e
            }();
            t.Client = c
        }, 170: (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.API_URL = void 0, t.API_URL = "https://hivesigner.com"
        }, 549: (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.BASE_URL = void 0, t.BASE_URL = "https://hivesigner.com"
        }, 97: (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.BETA_URL = void 0, t.BETA_URL = "https://hivesigner.com"
        }, 366: function (e, t, r) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {
                void 0 === n && (n = r), Object.defineProperty(e, n, {
                    enumerable: !0, get: function () {
                        return t[r]
                    }
                })
            } : function (e, t, r, n) {
                void 0 === n && (n = r), e[n] = t[r]
            }), o = this && this.__exportStar || function (e, t) {
                for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r)
            };
            Object.defineProperty(t, "__esModule", {value: !0}), o(r(170), t), o(r(549), t), o(r(97), t)
        }, 118: function (e, t, r) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {
                void 0 === n && (n = r), Object.defineProperty(e, n, {
                    enumerable: !0, get: function () {
                        return t[r]
                    }
                })
            } : function (e, t, r, n) {
                void 0 === n && (n = r), e[n] = t[r]
            }), o = this && this.__exportStar || function (e, t) {
                for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r)
            };
            Object.defineProperty(t, "__esModule", {value: !0}), o(r(755), t)
        }, 755: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.Initialize = void 0;
            var n = r(934);
            t.Initialize = function (e) {
                return console.warn('The function "Initialize" is deprecated, please use the class "Client" instead.'), new n.Client(e)
            }
        }, 813: function (e, t, r) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {
                void 0 === n && (n = r), Object.defineProperty(e, n, {
                    enumerable: !0, get: function () {
                        return t[r]
                    }
                })
            } : function (e, t, r, n) {
                void 0 === n && (n = r), e[n] = t[r]
            }), o = this && this.__exportStar || function (e, t) {
                for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r)
            };
            Object.defineProperty(t, "__esModule", {value: !0}), o(r(183), t), o(r(510), t), o(r(742), t), o(r(493), t)
        }, 510: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.sendOperation = void 0;
            var n = r(366), o = r(117), i = r(955);
            t.sendOperation = function (e, t, r) {
                var s = o.encodeOp(e, t).replace("hive://", n.BETA_URL + "/");
                return r && i.isBrowser() ? window.open(s, "_blank").focus() : s
            }
        }, 742: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.sendOperations = void 0;
            var n = r(117), o = r(955), i = r(366);
            t.sendOperations = function (e, t, r) {
                var s = n.encodeOps(e, t).replace("hive://", i.BETA_URL + "/");
                return r && o.isBrowser() ? window.open(s, "_blank").focus() : s
            }
        }, 493: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.sendTransaction = void 0;
            var n = r(117), o = r(366), i = r(955);
            t.sendTransaction = function (e, t, r) {
                var s = n.encodeTx(e, t).replace("hive://", o.BETA_URL + "/");
                return r && i.isBrowser() ? window.open(s, "_blank").focus() : s
            }
        }, 183: (e, t, r) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.sign = void 0;
            var n = r(366);
            t.sign = function (e, t, r) {
                if (console.warn('The function "sign" is deprecated.'), "string" != typeof e || "object" != typeof t || null === t) return {
                    error: "invalid_request",
                    error_description: "Request has an invalid format"
                };
                var o = n.BASE_URL + "/sign/" + e + "?";
                return (o += Object.keys(t).map((function (e) {
                    return e + "=" + encodeURIComponent(t[e])
                })).join("&")) + (r ? "&redirect_uri=" + encodeURIComponent(r) : "")
            }
        }, 955: function (e, t, r) {
            "use strict";
            var n = this && this.__createBinding || (Object.create ? function (e, t, r, n) {
                void 0 === n && (n = r), Object.defineProperty(e, n, {
                    enumerable: !0, get: function () {
                        return t[r]
                    }
                })
            } : function (e, t, r, n) {
                void 0 === n && (n = r), e[n] = t[r]
            }), o = this && this.__exportStar || function (e, t) {
                for (var r in e) "default" === r || Object.prototype.hasOwnProperty.call(t, r) || n(t, e, r)
            };
            Object.defineProperty(t, "__esModule", {value: !0}), o(r(242), t)
        }, 242: (e, t) => {
            "use strict";
            Object.defineProperty(t, "__esModule", {value: !0}), t.isBrowser = void 0, t.isBrowser = function () {
                return "undefined" != typeof window && !!window
            }
        }, 355: () => {
        }
    }, t = {};

    function r(n) {
        if (t[n]) return t[n].exports;
        var o = t[n] = {exports: {}};
        return e[n].call(o.exports, o, o.exports, r), o.exports
    }

    r.g = function () {
        if ("object" == typeof globalThis) return globalThis;
        try {
            return this || new Function("return this")()
        } catch (e) {
            if ("object" == typeof window) return window
        }
    }(), (() => {
        "use strict";
        var e = r(934), t = r(118), n = r(813);
        e.Client, t.Initialize, n.sign, n.sendTransaction, n.sendOperations, n.sendOperation
    })()
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,