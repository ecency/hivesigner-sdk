import { CallbackFunction, ClientConfig, LoginOptions, SendResponse } from './types';
import { Operation } from '@hiveio/dhive';
export declare class Client {
    apiURL: string;
    app: string;
    callbackURL: string;
    scope: string[];
    responseType: string;
    accessToken?: string;
    constructor(config: ClientConfig);
    setBaseURL(): this;
    setApiURL(url: string): this;
    setApp(app: string): this;
    setCallbackURL(url: string): this;
    setAccessToken(accessToken: string): this;
    removeAccessToken(): this;
    setScope(scope: string[]): this;
    getLoginURL(state: string, account?: string): string;
    login(options: LoginOptions): void;
    me(): Promise<SendResponse>;
    me(cb: CallbackFunction): Promise<SendResponse>;
    decode(): Promise<SendResponse>;
    decode(cb: CallbackFunction): Promise<SendResponse>;
    vote(voter: string, author: string, permlink: string, weight: string | number): Promise<SendResponse>;
    vote(voter: string, author: string, permlink: string, weight: string | number, cb: CallbackFunction): Promise<SendResponse>;
    comment(parentAuthor: string, parentPermlink: string, author: string, permlink: string, title: string, body: any, jsonMetadata: any): Promise<SendResponse>;
    comment(parentAuthor: string, parentPermlink: string, author: string, permlink: string, title: string, body: any, jsonMetadata: any, cb: CallbackFunction): Promise<SendResponse>;
    deleteComment(author: string, permlink: string): Promise<SendResponse>;
    deleteComment(author: string, permlink: string, cb: CallbackFunction): Promise<SendResponse>;
    customJson(requiredAuths: any, requiredPostingAuths: any, id: string, json: any): Promise<SendResponse>;
    customJson(requiredAuths: any, requiredPostingAuths: any, id: string, json: any, cb: CallbackFunction): Promise<SendResponse>;
    reblog(account: string, author: string, permlink: string): Promise<SendResponse>;
    reblog(account: string, author: string, permlink: string, cb: CallbackFunction): Promise<SendResponse>;
    follow(follower: string, following: string): Promise<SendResponse>;
    follow(follower: string, following: string, cb: CallbackFunction): Promise<SendResponse>;
    unfollow(unfollower: string, unfollowing: string): Promise<SendResponse>;
    unfollow(unfollower: string, unfollowing: string, cb: CallbackFunction): Promise<SendResponse>;
    ignore(follower: string, following: string): Promise<SendResponse>;
    ignore(follower: string, following: string, cb: CallbackFunction): Promise<SendResponse>;
    claimRewardBalance(account: string, rewardHive: string, rewardHbd: string, rewardVests: string): Promise<SendResponse>;
    claimRewardBalance(account: string, rewardHive: string, rewardHbd: string, rewardVests: string, cb: CallbackFunction): Promise<SendResponse>;
    revokeToken(): Promise<Client>;
    revokeToken(cb: CallbackFunction): Promise<Client>;
    updateUserMetadata(metadata: any): Promise<SendResponse>;
    updateUserMetadata(metadata: any, cb: CallbackFunction): Promise<SendResponse>;
    send(route: string, method: string, body: any): Promise<SendResponse>;
    send(route: string, method: string, body: any, cb: CallbackFunction): Promise<SendResponse>;
    broadcast(operations: Operation[]): Promise<SendResponse>;
    broadcast(operations: Operation[], cb: CallbackFunction): Promise<SendResponse>;
    private makeRequest;
}
